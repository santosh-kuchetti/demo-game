{"ast":null,"code":"import * as React from 'react';\nimport rcWarning, { resetWarned } from \"rc-util/es/warning\";\nexport { resetWarned };\nexport function noop() {}\n// eslint-disable-next-line import/no-mutable-exports\nvar warning = noop;\nif (process.env.NODE_ENV !== 'production') {\n  warning = function warning(valid, component, message) {\n    rcWarning(valid, \"[antd: \".concat(component, \"] \").concat(message));\n    // StrictMode will inject console which will not throw warning in React 17.\n    if (process.env.NODE_ENV === 'test') {\n      resetWarned();\n    }\n  };\n}\nexport var WarningContext = /*#__PURE__*/React.createContext({});\n/**\n * This is a hook but we not named as `useWarning`\n * since this is only used in development.\n * We should always wrap this in `if (process.env.NODE_ENV !== 'production')` condition\n */\nexport var devUseWarning = process.env.NODE_ENV !== 'production' ? function (component) {\n  var _React$useContext = React.useContext(WarningContext),\n    deprecated = _React$useContext.deprecated;\n  var typeWarning = function typeWarning(valid, type, message) {\n    if (deprecated !== false || type !== 'deprecated') {\n      process.env.NODE_ENV !== \"production\" ? warning(valid, component, message) : void 0;\n    }\n  };\n  typeWarning.deprecated = function (valid, oldProp, newProp, message) {\n    typeWarning(valid, 'deprecated', \"`\".concat(oldProp, \"` is deprecated. Please use `\").concat(newProp, \"` instead.\").concat(message ? \" \".concat(message) : ''));\n  };\n  return typeWarning;\n} : function () {\n  var noopWarning = function noopWarning() {};\n  noopWarning.deprecated = noop;\n  return noopWarning;\n};\nexport default warning;","map":{"version":3,"names":["React","rcWarning","resetWarned","noop","warning","process","env","NODE_ENV","valid","component","message","concat","WarningContext","createContext","devUseWarning","_React$useContext","useContext","deprecated","typeWarning","type","oldProp","newProp","noopWarning"],"sources":["D:/Programming/demo-game/node_modules/antd/es/_util/warning.js"],"sourcesContent":["import * as React from 'react';\nimport rcWarning, { resetWarned } from \"rc-util/es/warning\";\nexport { resetWarned };\nexport function noop() {}\n// eslint-disable-next-line import/no-mutable-exports\nlet warning = noop;\nif (process.env.NODE_ENV !== 'production') {\n  warning = (valid, component, message) => {\n    rcWarning(valid, `[antd: ${component}] ${message}`);\n    // StrictMode will inject console which will not throw warning in React 17.\n    if (process.env.NODE_ENV === 'test') {\n      resetWarned();\n    }\n  };\n}\nexport const WarningContext = /*#__PURE__*/React.createContext({});\n/**\n * This is a hook but we not named as `useWarning`\n * since this is only used in development.\n * We should always wrap this in `if (process.env.NODE_ENV !== 'production')` condition\n */\nexport const devUseWarning = process.env.NODE_ENV !== 'production' ? component => {\n  const {\n    deprecated\n  } = React.useContext(WarningContext);\n  const typeWarning = (valid, type, message) => {\n    if (deprecated !== false || type !== 'deprecated') {\n      process.env.NODE_ENV !== \"production\" ? warning(valid, component, message) : void 0;\n    }\n  };\n  typeWarning.deprecated = (valid, oldProp, newProp, message) => {\n    typeWarning(valid, 'deprecated', `\\`${oldProp}\\` is deprecated. Please use \\`${newProp}\\` instead.${message ? ` ${message}` : ''}`);\n  };\n  return typeWarning;\n} : () => {\n  const noopWarning = () => {};\n  noopWarning.deprecated = noop;\n  return noopWarning;\n};\nexport default warning;"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,IAAIC,WAAW,QAAQ,oBAAoB;AAC3D,SAASA,WAAW;AACpB,OAAO,SAASC,IAAIA,CAAA,EAAG,CAAC;AACxB;AACA,IAAIC,OAAO,GAAGD,IAAI;AAClB,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCH,OAAO,GAAG,SAAAA,QAACI,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAK;IACvCT,SAAS,CAACO,KAAK,YAAAG,MAAA,CAAYF,SAAS,QAAAE,MAAA,CAAKD,OAAO,CAAE,CAAC;IACnD;IACA,IAAIL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;MACnCL,WAAW,CAAC,CAAC;IACf;EACF,CAAC;AACH;AACA,OAAO,IAAMU,cAAc,GAAG,aAAaZ,KAAK,CAACa,aAAa,CAAC,CAAC,CAAC,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,aAAa,GAAGT,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,UAAAE,SAAS,EAAI;EAChF,IAAAM,iBAAA,GAEIf,KAAK,CAACgB,UAAU,CAACJ,cAAc,CAAC;IADlCK,UAAU,GAAAF,iBAAA,CAAVE,UAAU;EAEZ,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIV,KAAK,EAAEW,IAAI,EAAET,OAAO,EAAK;IAC5C,IAAIO,UAAU,KAAK,KAAK,IAAIE,IAAI,KAAK,YAAY,EAAE;MACjDd,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGH,OAAO,CAACI,KAAK,EAAEC,SAAS,EAAEC,OAAO,CAAC,GAAG,KAAK,CAAC;IACrF;EACF,CAAC;EACDQ,WAAW,CAACD,UAAU,GAAG,UAACT,KAAK,EAAEY,OAAO,EAAEC,OAAO,EAAEX,OAAO,EAAK;IAC7DQ,WAAW,CAACV,KAAK,EAAE,YAAY,MAAAG,MAAA,CAAOS,OAAO,mCAAAT,MAAA,CAAkCU,OAAO,gBAAAV,MAAA,CAAcD,OAAO,OAAAC,MAAA,CAAOD,OAAO,IAAK,EAAE,CAAE,CAAC;EACrI,CAAC;EACD,OAAOQ,WAAW;AACpB,CAAC,GAAG,YAAM;EACR,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS,CAAC,CAAC;EAC5BA,WAAW,CAACL,UAAU,GAAGd,IAAI;EAC7B,OAAOmB,WAAW;AACpB,CAAC;AACD,eAAelB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}